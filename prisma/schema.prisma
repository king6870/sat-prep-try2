generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          String        @default("USER")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  testSessions  TestSession[]
  studyPlans    StudyPlan[]
  progress      Progress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String   @id @default(cuid())
  question    String
  choices     String   // JSON string of choices array
  answer      String
  explanation String
  pointAmount Int      @map("point_amount")
  category    String
  difficulty  String   @default("medium")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([difficulty])
}

model TestSession {
  id          String     @id @default(cuid())
  userId      String
  type        String     // "practice", "full_test", "timed"
  category    String?    // specific category or null for mixed
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  score       Int?
  totalQuestions Int
  correctAnswers Int     @default(0)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Response[]

  @@index([userId])
  @@index([type])
}

model Response {
  id            String      @id @default(cuid())
  sessionId     String
  questionId    String
  userAnswer    String
  isCorrect     Boolean
  timeSpent     Int?        // seconds
  createdAt     DateTime    @default(now())
  session       TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([questionId])
}

model StudyPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  targetScore Int?
  categories  String   // JSON array of categories to focus on
  schedule    String   // JSON object with study schedule
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Progress {
  id              String   @id @default(cuid())
  userId          String
  category        String
  totalQuestions  Int      @default(0)
  correctAnswers  Int      @default(0)
  averageScore    Float    @default(0)
  lastPracticed   DateTime?
  streakDays      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
}
